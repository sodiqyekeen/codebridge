name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags (v1.0.0, v1.2.3, etc.)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Release version: $VERSION"
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ steps.version.outputs.version }}
      
      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal
      
      - name: Pack NuGet packages
        run: dotnet pack --no-build --configuration Release --output ./artifacts /p:PackageVersion=${{ steps.version.outputs.version }}
      
      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        continue-on-error: true
        with:
          configuration: ".github/changelog-config.json"
          failOnError: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set default changelog for first release
        id: default_changelog
        run: |
          if [ -z "${{ steps.changelog.outputs.changelog }}" ]; then
            echo "changelog=üéâ Initial preview release of CodeBridge!" >> $GITHUB_OUTPUT
          else
            echo "changelog=${{ steps.changelog.outputs.changelog }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: CodeBridge v${{ steps.version.outputs.version }}
          body: |
            ## üöÄ CodeBridge v${{ steps.version.outputs.version }}
            
            ### üì¶ NuGet Packages
            
            - `CodeBridge.Core` - Core types and services
            - `CodeBridge.Cli` - CLI tool for SDK generation
            - `CodeBridge.MSBuild` - MSBuild integration
            
            ### üì• Installation
            
            ```bash
            # CLI Tool
            dotnet tool install -g CodeBridge.Cli --version ${{ steps.version.outputs.version }}
            
            # MSBuild Integration
            dotnet add package CodeBridge.MSBuild --version ${{ steps.version.outputs.version }}
            ```
            
            ### üìù What's Changed
            
            ${{ steps.default_changelog.outputs.changelog }}
            
            ### üìö Documentation
            
            - [Getting Started](https://sodiqyekeen.github.io/codebridge/docs/getting-started/installation.html)
            - [Configuration Guide](https://sodiqyekeen.github.io/codebridge/docs/guides/configuration.html)
            - [API Reference](https://sodiqyekeen.github.io/codebridge/api/)
          files: artifacts/*.nupkg
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-packages
          path: artifacts/*.nupkg

  publish-nuget:
    name: Publish to NuGet.org
    runs-on: ubuntu-latest
    needs: [create-release]
    # Publish preview releases too
    # if: github.event.inputs.prerelease != 'true'
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: packages
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Publish to NuGet.org
        run: |
          for package in packages/*.nupkg; do
            echo "Publishing $package to NuGet.org..."
            dotnet nuget push "$package" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done
      
      - name: Verify publication
        run: |
          echo "‚úÖ Packages published to NuGet.org"
          echo "View at: https://www.nuget.org/packages?q=CodeBridge"

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [create-release]
    permissions:
      packages: write
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: packages
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Publish to GitHub Packages
        run: |
          for package in packages/*.nupkg; do
            echo "Publishing $package to GitHub Packages..."
            dotnet nuget push "$package" \
              --api-key ${{ secrets.GITHUB_TOKEN }} \
              --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
              --skip-duplicate
          done

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
      - name: Trigger documentation deployment
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: release-published
          client-payload: '{"version": "${{ needs.create-release.outputs.version }}"}'
      
      - name: Update README badges
        run: |
          echo "Documentation updated for v${{ needs.create-release.outputs.version }}"

  announce-release:
    name: Announce Release
    runs-on: ubuntu-latest
    needs: [create-release, publish-nuget]
    if: always() && needs.publish-nuget.result == 'success'
    
    steps:
      - name: Create announcement
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.create-release.outputs.version }}';
            const announcement = `
            üéâ **CodeBridge v${version} has been released!**
            
            üì¶ Install now:
            \`\`\`bash
            dotnet tool install -g CodeBridge.Cli --version ${version}
            \`\`\`
            
            üìö [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${version})
            üìñ [Documentation](https://sodiqyekeen.github.io/codebridge/)
            `;
            
            // Post to discussions if enabled
            console.log(announcement);
