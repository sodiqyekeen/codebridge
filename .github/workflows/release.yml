name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'Directory.Build.props'
      - 'src/**/*.cs'
      - '!src/**/*.Tests.cs'
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    outputs:
      version: ${{ steps.check_version.outputs.version }}
      prerelease: ${{ steps.check_version.outputs.prerelease }}
      release_notes: ${{ steps.read_version.outputs.release_notes }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Read version from Directory.Build.props
        id: read_version
        run: |
          # Extract version from Directory.Build.props
          VERSION=$(grep '<Version>' Directory.Build.props | sed -n 's/.*<Version>\(.*\)<\/Version>.*/\1/p' | tr -d '[:space:]')
          echo "project_version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Project version: $VERSION"
          
          # Extract release notes
          RELEASE_NOTES=$(sed -n '/<PackageReleaseNotes>/,/<\/PackageReleaseNotes>/p' Directory.Build.props | \
            sed '1d;$d' | sed 's/^[[:space:]]*//')
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Check if version already exists
        id: check_version
        run: |
          VERSION="${{ steps.read_version.outputs.project_version }}"
          
          # Check if tag already exists
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Version v$VERSION already tagged"
            
            # Append date to make it unique
            DATE_SUFFIX=$(date +%Y%m%d%H%M)
            NEW_VERSION="$VERSION.$DATE_SUFFIX"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "üìÖ Using version with date: v$NEW_VERSION"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ Using project version: v$VERSION"
          fi
          
          # Determine if pre-release based on version string
          if [[ "$VERSION" == *"preview"* ]] || [[ "$VERSION" == *"alpha"* ]] || [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"rc"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "üî¨ Pre-release detected"
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "üéâ Stable release"
          fi
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Release version: $VERSION"
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ steps.check_version.outputs.version }}
      
      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal
      
      - name: Pack NuGet packages
        run: dotnet pack --no-build --configuration Release --output ./artifacts /p:PackageVersion=${{ steps.check_version.outputs.version }}
      
      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        continue-on-error: true
        with:
          configuration: ".github/changelog-config.json"
          failOnError: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.check_version.outputs.version }}
          name: CodeBridge v${{ steps.check_version.outputs.version }}
          body: |
            ## üöÄ CodeBridge v${{ steps.check_version.outputs.version }}
            
            ### üì¶ NuGet Packages
            
            - `CodeBridge.Core` - Core types and services
            - `CodeBridge.Cli` - CLI tool for SDK generation
            - `CodeBridge.MSBuild` - MSBuild integration
            
            ### üì• Installation
            
            ```bash
            # CLI Tool
            dotnet tool install -g CodeBridge.Cli --version ${{ steps.check_version.outputs.version }}
            
            # MSBuild Integration
            dotnet add package CodeBridge.MSBuild --version ${{ steps.check_version.outputs.version }}
            ```
            
            ### üìù Release Notes
            
            ${{ steps.read_version.outputs.release_notes }}
            
            ${{ steps.changelog.outputs.changelog && '### üìã Changelog\n\n' || '' }}${{ steps.changelog.outputs.changelog }}
            
            ### üìö Documentation
            
            - [Getting Started](https://sodiqyekeen.github.io/codebridge/docs/getting-started/installation.html)
            - [Configuration Guide](https://sodiqyekeen.github.io/codebridge/docs/guides/configuration.html)
            - [API Reference](https://sodiqyekeen.github.io/codebridge/api/)
          files: artifacts/*.nupkg
          draft: false
          prerelease: ${{ steps.check_version.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-packages
          path: artifacts/*.nupkg

  publish-nuget:
    name: Publish to NuGet.org
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.create-release.outputs.prerelease != 'true' || true  # Publish all releases including previews
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: packages
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Publish to NuGet.org
        run: |
          for package in packages/*.nupkg; do
            echo "Publishing $package to NuGet.org..."
            dotnet nuget push "$package" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done
      
      - name: Verify publication
        run: |
          echo "‚úÖ Packages published to NuGet.org"
          echo "View at: https://www.nuget.org/packages?q=CodeBridge"

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [create-release]
    permissions:
      packages: write
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: packages
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Publish to GitHub Packages
        run: |
          for package in packages/*.nupkg; do
            echo "Publishing $package to GitHub Packages..."
            dotnet nuget push "$package" \
              --api-key ${{ secrets.GITHUB_TOKEN }} \
              --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
              --skip-duplicate
          done

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    permissions:
      contents: write
      actions: write
    
    steps:
      - name: Trigger documentation deployment
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: release-published
          client-payload: '{"version": "${{ needs.create-release.outputs.version }}"}'

  announce-release:
    name: Announce Release
    runs-on: ubuntu-latest
    needs: [create-release, publish-nuget]
    if: always() && needs.publish-nuget.result == 'success'
    
    steps:
      - name: Create announcement
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.create-release.outputs.version }}';
            const isPrerelease = '${{ needs.create-release.outputs.prerelease }}' === 'true';
            const releaseType = isPrerelease ? 'Preview' : 'Stable';
            const announcement = `
            üéâ **CodeBridge v${version} (${releaseType}) has been released!**
            
            üì¶ Install now:
            \`\`\`bash
            dotnet tool install -g CodeBridge.Cli --version ${version}
            \`\`\`
            
            üìö [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${version})
            üìñ [Documentation](https://sodiqyekeen.github.io/codebridge/)
            `;
            
            console.log(announcement);
