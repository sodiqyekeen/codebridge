name: Build and Test

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # For GitVersion
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build (Debug)
        run: dotnet build --no-restore --configuration Debug
      
      - name: Build (Release)
        run: dotnet build --no-restore --configuration Release
      
      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal --logger "trx;LogFileName=test-results.trx"
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/test-results.trx'
      

  test-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build
        run: dotnet build --no-restore --configuration Release
      
      - name: Run tests with coverage
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage
      
      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.17
        with:
          reports: 'coverage/**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub;TextSummary'
      
      - name: Add coverage summary to PR
        if: github.event_name == 'pull_request'
        run: |
          if [ -f coveragereport/SummaryGithub.md ]; then
            cat coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coveragereport/
      
      - name: Check coverage threshold
        shell: bash
        run: |
          # List all generated files for debugging
          echo "üìÅ Coverage files generated:"
          find coverage coveragereport -type f 2>/dev/null || echo "No coverage files found"
          
          # Extract coverage from Cobertura XML (most reliable)
          if compgen -G "coverage/**/coverage.cobertura.xml" > /dev/null; then
            COBERTURA_FILE=$(find coverage -name "coverage.cobertura.xml" | head -1)
            echo "Using Cobertura file: $COBERTURA_FILE"
            
            # Extract line-rate attribute and convert to percentage
            LINE_RATE=$(grep -oP 'line-rate="\K[0-9.]+' "$COBERTURA_FILE" | head -1)
            COVERAGE=$(echo "$LINE_RATE * 100" | bc)
            
            echo "Current coverage: ${COVERAGE}%"
            echo "‚ÑπÔ∏è  Coverage threshold (70%) disabled for preview release"
            echo "‚úÖ Coverage reporting: ${COVERAGE}%"
          else
            echo "‚ö†Ô∏è  No coverage files found, skipping coverage check"
            echo "‚úÖ Coverage check skipped"
          fi

  pack:
    name: Pack NuGet Packages
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build
        run: dotnet build --no-restore --configuration Release
      
      - name: Pack NuGet packages
        run: dotnet pack --no-build --configuration Release --output ./nupkgs
      
      - name: Upload NuGet artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: nupkgs/*.nupkg
      
      - name: List packages
        run: |
          echo "üì¶ Generated NuGet Packages:"
          ls -lh nupkgs/*.nupkg

  validate-packages:
    name: Validate NuGet Packages
    runs-on: ubuntu-latest
    needs: [pack]
    
    steps:
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: packages
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Basic package validation
        shell: bash
        run: |
          echo "üì¶ Validating NuGet packages..."
          
          # Check if packages directory exists and has files
          if [ ! -d "packages" ] || [ -z "$(ls -A packages/*.nupkg 2>/dev/null)" ]; then
            echo "‚ùå No packages found in packages directory"
            exit 1
          fi
          
          for package in packages/*.nupkg; do
            echo "----------------------------------------"
            PACKAGE_NAME=$(basename "$package")
            echo "Package: $PACKAGE_NAME"
            echo "Size: $(du -h "$package" | cut -f1)"
            
            # Create unique temp directory for this package
            TEMP_DIR="temp_${PACKAGE_NAME}_$$"
            mkdir -p "$TEMP_DIR"
            
            # Extract package
            echo "Extracting package..."
            unzip -q "$package" -d "$TEMP_DIR"
            
            # Find and validate .nuspec file
            NUSPEC_FILE=$(find "$TEMP_DIR" -type f -name "*.nuspec" | head -1)
            if [ -z "$NUSPEC_FILE" ]; then
              echo "‚ùå No .nuspec file found"
              echo "Contents of package:"
              find "$TEMP_DIR" -type f | head -20
              rm -rf "$TEMP_DIR"
              exit 1
            fi
            
            echo "‚úÖ Found .nuspec: $(basename "$NUSPEC_FILE")"
            echo ""
            echo "üìã Package Metadata:"
            grep -E "<(id|version|authors|description|projectUrl|repositoryUrl)>" "$NUSPEC_FILE" | sed 's/^/  /'
            echo ""
            
            # Check for DLL files
            DLL_FILES=$(find "$TEMP_DIR" -type f -name "*.dll")
            DLL_COUNT=$(echo "$DLL_FILES" | grep -c "\.dll$" || echo "0")
            
            if [ "$DLL_COUNT" -gt 0 ]; then
              echo "‚úÖ Found $DLL_COUNT assembly file(s):"
              echo "$DLL_FILES" | sed 's/^/  - /' | head -10
            else
              echo "‚ö†Ô∏è  No assembly files found (this might be a tools-only package)"
            fi
            
            # Cleanup
            rm -rf "$TEMP_DIR"
            echo "‚úÖ Package validation passed for $PACKAGE_NAME"
          done
          
          echo "----------------------------------------"
          echo "‚úÖ All packages validated successfully"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Check for vulnerable packages
        run: dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerable.txt
      
      - name: Fail on vulnerabilities
        run: |
          if grep -i "critical\|high" vulnerable.txt; then
            echo "‚ùå Found critical or high severity vulnerabilities"
            exit 1
          fi
          echo "‚úÖ No critical vulnerabilities found"

  status-check:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [build, test-coverage, pack, validate-packages, security-scan]
    if: always()
    
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.build.result }}" != "success" ] || 
             [ "${{ needs.test-coverage.result }}" != "success" ] ||
             [ "${{ needs.pack.result }}" != "success" ] ||
             [ "${{ needs.validate-packages.result }}" != "success" ] ||
             [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "‚ùå Build pipeline failed"
            exit 1
          fi
          echo "‚úÖ All checks passed!"
